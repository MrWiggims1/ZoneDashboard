@using System.Drawing;
@using System.Reflection
@using PnP.Framework.Modernization.Publishing
@using Serilog
@using ZoneProductionDashBoard.Components.VanTreeNodes;
@using ZoneProductionLibrary.ProductionServices.Main

@inherits ProductionPageBase

@implements IDisposable

@page "/Handover"

<PageTitle>Handover Calendar</PageTitle>

<div style="height: calc(100vh - 4rem);">
    @{ List<VanProductionInfo> overDueVans = ProductionService.ProductionVans.Values.Where(x => x.Handover.HasValue && x.HandoverState == HandoverState.UnhandedOver && x.Handover.Value < DateTimeOffset.Now).OrderBy(x => x.Handover!.Value).ToList(); }
    @{ List<VanProductionInfo> recentChanges = ProductionService.ProductionVans.Values.Where(x => x.HasHandoverDateChanged(TimeSpan.FromDays(7), TimeSpan.FromDays(7))).ToList();}

    @if (overDueVans.Count > 0)
    {
        <RadzenStack Orientation="Orientation.Horizontal" Gap="1em">
            <RadzenIcon Icon="warning" IconColor="@Colors.Danger" style="font-weight: 400;" MouseEnter="(el) => ShowOverDueVanToolTip(el, overDueVans)" MouseLeave="() => { TooltipService.Close(); }"/>
            <RadzenText>@overDueVans.Count vans overdue!</RadzenText>
        </RadzenStack>
    }
    @if (recentChanges.Count > 0)
    {
        <RadzenStack Orientation="Orientation.Horizontal" Gap="1em">
            <RadzenIcon Icon="warning" IconColor="@Colors.Danger" style="font-weight: 400;" MouseEnter="(el) => UpdatedDatesToolTip(el, recentChanges)" MouseLeave="() => { TooltipService.Close(); }"/>
            <RadzenText>@recentChanges.Count Handovers recently modified!</RadzenText>
        </RadzenStack>
    }

    <RadzenScheduler
        @ref=@_scheduler 
        LoadData="@OnLoadData"
        AppointmentRender=@OnVanRender
        SlotRender=@OnSlotRender
        TodaySelect="SelectToday"
        style="height: 100%" 
        Data="@_data"
        TItem="VanData"
        StartProperty="Handover"
        EndProperty="HandoverEnd"
        TextProperty="Name">
        <ChildContent>
            <CustomRadzenWeekView StartTime="TimeSpan.FromHours(3)" EndTime="TimeSpan.FromHours(17)" HeaderFormat="ddd dd/MM" TimeFormat="HH:mm"/>
            <RadzenMonthView MaxAppointmentsInSlot="3"/>
        </ChildContent>
        <Template Context="data">
            <VanButton VanName="@data.Name" ShowIcon="true" Color="@ColorTranslator.ToHtml(data.HandoverState is HandoverState.HandedOver ? Color.FromArgb(255, 180, 180, 180) : data.VanModel.GetTypeColor())" />
        </Template>
    </RadzenScheduler>
</div>
@code {
    [Inject] 
    TooltipService TooltipService { get; set; } = default!;

    [Inject] 
    public IProductionService ProductionService { get; set; } = default!;
    
    RadzenScheduler<VanData> _scheduler = default!;

    public class VanData(VanProductionInfo info)
    {
        public string Name { get; } = info.Name;
        public string Id { get; } = info.Id;
        public DateTime Handover { get; } = info.Handover!.Value.LocalDateTime;
        public DateTime HandoverEnd => Handover + TimeSpan.FromHours(1);
        public HandoverState HandoverState { get; } = info.HandoverState;
        public VanModel VanModel { get; } = info.VanModel;
    }

    List<VanData> _data = [];

    protected override void QueueUpdateIfIdSubscribed(object? sender, BoardUpdateInfo e)
    {
        if(!PageLoaded)
            return;
        
        if (e.Type == BoardUpdateType.Hanover)
        {
            QueueUpdate();
        }

        else if ((e.TotalBoardUpdate || e.Type is BoardUpdateType.JobCard or BoardUpdateType.RedCard) && _data.Any(x => x.Id == e.BoardId))
        {
            QueueUpdate();
        }
        
        // TODO: update overdue and recently updated vans
    }

    protected override async Task Update(CancellationToken token, TimeSpan? waitTime = null)
    {
        if (waitTime is not null)
        {
            await Task.Delay(waitTime.Value);
            
            if(token.IsCancellationRequested && DateTime.Now - LastUpdate < waitTime * .99)
                return;
        }
        
        _scheduler.Reload();
    }

    void OnLoadData(SchedulerLoadDataEventArgs args)
    {
        var vansToLoad = ProductionService.ProductionVans.Where(x => x.Value.Handover.HasValue && x.Value.Handover.Value.LocalDateTime > args.Start && x.Value.Handover.Value.LocalDateTime < args.End).ToArray();

        _data = [];

        foreach (var pair in vansToLoad)
        {
            if (!pair.Value.Handover.HasValue)
                throw new ArgumentNullException(nameof(pair.Value.Handover), "Cannot display van with no handover date on calendar.");
            
            _data.Add(new VanData(pair.Value));
        }

        if (!PageLoaded)
            PageLoaded = true;
    }

    public override void Dispose()
    {
        _data = [];
        _scheduler.Dispose();
        
        base.Dispose();
    }

    void OnVanRender(SchedulerAppointmentRenderEventArgs<VanData> args)
    {
        args.Attributes["style"] = "background: rgba(0,0,0,.01)";
    }

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }
    
    void SelectToday(SchedulerTodaySelectEventArgs args)
    {
        if (args.Today.DayOfWeek == DayOfWeek.Saturday)
        {
            args.Today = args.Today.Date.AddDays(2);
        }
        else if (args.Today.DayOfWeek == DayOfWeek.Sunday)
        {
            args.Today = args.Today.Date.AddDays(1);
        }
    }

    void ShowOverDueVanToolTip(ElementReference elementReference, List<VanProductionInfo> vans)
    {
        RenderFragment<TooltipService> fragment = TooltipService =>
          {
              return __builder =>
                     {
                         <RadzenStack Gap="3px">
                             @foreach (VanProductionInfo van in vans)
                             {
                                 <RadzenText>@van.Name.ToUpper() - @van.Handover!.Value.LocalDateTime.ToString("dd/MM/yy")</RadzenText>
                             }
                         </RadzenStack>
                     };
          };

        TooltipService.Open(elementReference, fragment, new TooltipOptions() { Style = "background: red", Position = TooltipPosition.Right, Duration = null });
    }
    
    void UpdatedDatesToolTip(ElementReference elementReference, List<VanProductionInfo> vans)
    {
        RenderFragment<TooltipService> fragment = TooltipService =>
          {
              return __builder =>
                     {
                         <RadzenStack Gap="3px">
                             @foreach (VanProductionInfo van in vans.OrderBy(x => x.Handover))
                             {
                                 <RadzenText>@van.Name.ToUpper() - @ShortDateString(van.HandoverHistory.TakeLast(2).First().HandoverDate.LocalDateTime) -> @ShortDateString(van.Handover!.Value.LocalDateTime)</RadzenText>
                             }
                         </RadzenStack>
                     };
          };

        TooltipService.Open(elementReference, fragment, new TooltipOptions() { Style = "background: red", Position = TooltipPosition.Right, Duration = null });
    }

    string ShortDateString(DateTime dateTime)
    {
        string suffix;
        
        if (dateTime.Date.Day is 1 or 21 or 31)
            suffix = "st";
        
        else if (dateTime.Date.Day is 2 or 22)
            suffix = "nd";
        
        else if (dateTime.Date.Day is 3 or 23)
            suffix = "rd";
        
        else
            suffix = "th";

        return dateTime.ToString("ddd d") + suffix + " " + dateTime.ToString("hh tt");
    }
}
