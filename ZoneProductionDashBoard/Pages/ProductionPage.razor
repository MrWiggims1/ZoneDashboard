@page "/production/"

@using BlazorBootstrap
@using Orientation = Radzen.Orientation
@using Serilog
@inherits ProductionPageBase

<PageTitle>Production</PageTitle>

<StatFilterComponent Height="4rem" />

<div style="width: 100vw; height: calc(100vh - 10rem); overflow-x: auto !important; justify-items: center; align-content: center">
    <ProductionLineViewComponent Vans="_vans.Where(x => x.VanModel.VanType() == StatsService.SelectedVanType && x.Position is not PostProduction)" @ref="_line"/>

    <RadzenStack>
        <RadzenText TextStyle="TextStyle.H3">Car Park:</RadzenText>
        <RadzenStack Orientation="Orientation.Horizontal">
            @foreach (VanBoard van in _vans.Where(x => x is not null && x.Position is PostProduction && x.VanModel.VanType() == StatsService.SelectedVanType && x.Handover.HasValue).OrderBy(x => x.Handover))
            {
                <RadzenStack>
                    <RadzenText>Handover @van.Handover!.Value.LocalDateTime.Date.ToString("dd/MM")</RadzenText>
                    <VanButton VanName="@van.Name" DetailedButton="true" Color="#FFFFFF" OverrideColorToStatus="true" UseStatsServiceFilter="true"/>
                </RadzenStack>
            }
        </RadzenStack>
    </RadzenStack>
</div>

@code {
    [Inject] 
    public NavigationManager NavigationManager { get; set; } = default!;

    IEnumerable<VanBoard> _vans = [];

    ProductionLineViewComponent _line = default!;

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += (_, _) => _line.Update();
        
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            ShowLoadingDialog();

            SubscribedIds = ProductionService.ProductionVanIds(true).ToList();

            var vans = await ProductionService.GetBoardsAsync(Progress, SubscribedIds);

            _vans = vans;

            CloseLoadingDialog();
            
            _line.Update();
            
            StateHasChanged();

            PageLoaded = true;
        }
    }

    protected override void QueueUpdateIfIdSubscribed(object? sender, BoardUpdateInfo e)
    {
        if(!PageLoaded)
            return;
        
        var oldList = new List<string>(SubscribedIds);
        SubscribedIds = ProductionService.ProductionVanIds(true).ToList();
        
        if( 
            !oldList.SequenceEqual(SubscribedIds) ||
            e.Type is BoardUpdateType.Position ||
            SubscribedIds.Contains(e.BoardId) && (e.TotalBoardUpdate || e.Type is BoardUpdateType.JobCard or BoardUpdateType.RedCard))
        {
            QueueUpdate();
        }
    }

    protected override async Task Update(CancellationToken token, TimeSpan? waitTime = null)
    {
        if (waitTime is not null)
        {
            await Task.Delay(waitTime.Value);
            
            if(token.IsCancellationRequested && DateTime.Now - LastUpdate < waitTime * .99)
                return;
        }
        
        _vans = ProductionService.GetBoards(SubscribedIds).ToList();
            
        _line.Update();
        
        StateHasChanged();
    }

    public override void Dispose()
    {
        NavigationManager.LocationChanged -= (_, _) => _line.Update();
        
        base.Dispose();
    }
}