@page "/production/"

@using Serilog
@inherits ProductionPageBase

<PageTitle>Production</PageTitle>

<div style="width: 100vw; height: calc(100vh - 4rem); overflow-x: scroll">
    <RadzenStack JustifyContent="JustifyContent.Center" >
        <ProductionLineViewComponent TypeOfVan="TypeOfVan.Gen2" Vans="_gen2Boards" @ref="_gen2Line"></ProductionLineViewComponent>
        <ProductionLineViewComponent TypeOfVan="TypeOfVan.Expo" Vans="_expoBoards" @ref="_expoLine"></ProductionLineViewComponent>
    </RadzenStack>
</div>
@code {
    List<VanBoard> _gen2Boards = [];
    List<VanBoard> _expoBoards = [];

    ProductionLineViewComponent _gen2Line = default!;
    ProductionLineViewComponent _expoLine = default!;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            ShowLoadingDialog();

            SubscribedIds = ProductionService.ProductionVanIds(false).ToList();

            var boards = await ProductionService.GetBoardsAsync(Progress, SubscribedIds);

            _gen2Boards = boards.Where(x => x.VanModel.IsGen2()).ToList();
            _expoBoards = boards.Where(x => !x.VanModel.IsGen2()).ToList();

            CloseLoadingDialog();
            
            _gen2Line.Update();
            _expoLine.Update();
            
            StateHasChanged();

            PageLoaded = true;
        }
    }

    protected override void QueueUpdateIfIdSubscribed(object? sender, BoardUpdateInfo e)
    {
        if(!PageLoaded)
            return;
        
        var oldList = new List<string>(SubscribedIds);
        SubscribedIds = ProductionService.ProductionVanIds(false).ToList();
        
        if( 
            !oldList.SequenceEqual(SubscribedIds) ||
            e.Type is BoardUpdateType.Position ||
            SubscribedIds.Contains(e.BoardId) && (e.TotalBoardUpdate || e.Type is BoardUpdateType.JobCard or BoardUpdateType.RedCard))
        {
            QueueUpdate();
        }
    }

    protected override async Task Update(CancellationToken token, TimeSpan? waitTime = null)
    {
        if (waitTime is not null)
        {
            await Task.Delay(waitTime.Value);
            
            if(token.IsCancellationRequested && DateTime.Now - LastUpdate < waitTime * .99)
                return;
        }
        
        var boards = ProductionService.GetBoards(SubscribedIds).ToList();

        _gen2Boards = boards.Where(x => x.VanModel.IsGen2()).ToList();
        _expoBoards = boards.Where(x => !x.VanModel.IsGen2()).ToList();
            
        _gen2Line.Update();
        _expoLine.Update();
        
        StateHasChanged();
    }

}