@page "/cards/"

@using Serilog
@inherits ProductionPageBase

<PageTitle>Cards</PageTitle>

<RadzenTabs>
    <Tabs>
        <RadzenTabsItem Text="Red Cards">
            <RedCardGridComponent RedCards="@_redCards" Style="height: 80vh" @ref="@_rGrid" IsSingleVan="false"/>
        </RadzenTabsItem>
        <RadzenTabsItem Text="Yellow Cards">
            <YellowCardGridComponent YellowCards="@_yellowCards" Style="height: 80vh" @ref="@_yGrid" IsSingleVan="false"/>
        </RadzenTabsItem>
        <RadzenTabsItem Text="Job Cards">
            <JobCardGridComponent JobCards="@_jobCards" Style="height: 80vh" @ref="@_jGrid"/>
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>

@code {
    IEnumerable<RedCard> _redCards = [];
    RedCardGridComponent? _rGrid;
    
    IEnumerable<YellowCard> _yellowCards = [];
    YellowCardGridComponent? _yGrid;
    
    IEnumerable<JobCard> _jobCards = [];
    JobCardGridComponent? _jGrid;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            ShowLoadingDialog();

            SubscribedIds = ProductionService.ProductionVanIds(true).ToList();

            _redCards = await ProductionService.GetRedCardsAsync(Progress, SubscribedIds);
            _yellowCards = ProductionService.GetYellowCards(SubscribedIds);
            _jobCards = ProductionService.GetJobCards(SubscribedIds);
            
            if(_rGrid is not null)
                _rGrid.Update();
        
            if(_yGrid is not null)
                _yGrid.Update();
            
            if(_jGrid is not null)
                _jGrid.Update();

            CloseLoadingDialog();

            StateHasChanged();

            PageLoaded = true;
        }
    }

    protected override void QueueUpdateIfIdSubscribed(object? sender, BoardUpdateInfo e)
    {
        if(!PageLoaded)
            return;

        List<string> oldIds = new List<string>(SubscribedIds);
        SubscribedIds = ProductionService.ProductionVanIds(true).ToList();
        
        if(
            !SubscribedIds.SequenceEqual(oldIds) ||
            (e.Type is BoardUpdateType.Position or BoardUpdateType.Hanover) ||
            (e.TotalBoardUpdate || e.Type is BoardUpdateType.JobCard or BoardUpdateType.RedCard && SubscribedIds.Contains(e.BoardId)))
        {
            QueueUpdate();
        }
    }

    protected override async Task Update(CancellationToken token, TimeSpan? waitTime = null)
    {
        if (waitTime is not null)
        {
            await Task.Delay(waitTime.Value);
            
            if(token.IsCancellationRequested && DateTime.Now - LastUpdate < waitTime * .99)
                return;
        }
        
        _redCards = ProductionService.GetRedCards(SubscribedIds);
        _yellowCards = ProductionService.GetYellowCards(SubscribedIds);
        _jobCards = ProductionService.GetJobCards(SubscribedIds);
            
        _rGrid?.Update();
        _yGrid?.Update();
        _jGrid?.Update();
    }
}