@using Radzen.Blazor.Rendering
@using Serilog
@using ApexCharts

@inherits UpdatableComponent

<ApexChart
    TItem="DateDataItem"
    Title="RedCards/Day"
    XAxisType="XAxisType.Datetime"
    @ref="@_redCardDateChart"
    Height="300"
    Options="_mainOptions">

    @foreach (string name in _redCardDateData.Keys)
    {
        <ApexPointSeries
            TItem="DateDataItem"
            Items="@_redCardDateData[name]"
            Name="@name"
            YValue="item => item.Value"
            XValue="item => item.Key"
            SeriesType="SeriesType.Line"
            Color="@_colorsOfKeys[name]"/>
    }
</ApexChart>

<ApexChart
    TItem="DateDataItem"
    XAxisType="XAxisType.Datetime"
    @ref="@_timeRangeChart"
    Height="100"
    Options="_rangeOptions"
    OnBrushScrolled="OnBrushScrolled">

    <ApexPointSeries
        TItem="DateDataItem"
        Name="Total"
        Items="_totalCountData"
        YValue="item => item.Value"
        XValue="item => item.Key"
        SeriesType="SeriesType.Line"
        Color="@Colors.Black"/>

</ApexChart>

@code {
    [Inject]
    public IProductionService ProductionService { get; set; } = default!;

    [Inject]
    public StatsService StatsService { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public DateTime TotalMinDate { get; set; }

    public event EventHandler<(DateTime, DateTime)>? BrushDateUpdated;

    Dictionary<string, IEnumerable<DateDataItem>> _redCardDateData = [];
    IEnumerable<DateDataItem> _totalCountData = [];

    string groupName = "syncedCharts";
    ApexChart<DateDataItem> _redCardDateChart = default!;
    ApexChart<DateDataItem> _timeRangeChart = default!;

    ApexChartOptions<DateDataItem> _mainOptions = new ApexChartOptions<DateDataItem>();
    ApexChartOptions<DateDataItem> _rangeOptions = new ApexChartOptions<DateDataItem>();

    Dictionary<string, string> _colorsOfKeys = [];
   
    public override void Update()
    {
        _redCardDateData = LoadRedCardDateData();
        _totalCountData = GetTotalData(_redCardDateData);
        base.Update();
        _redCardDateChart.UpdateSeriesAsync();
        _timeRangeChart.UpdateSeriesAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            _redCardDateData = LoadRedCardDateData();
            _totalCountData = GetTotalData(_redCardDateData);

            _rangeOptions.Annotations = new Annotations()
            {
                Xaxis = []
            };

            _mainOptions.Annotations = new Annotations()
            {
                Xaxis = []
            };

            for (DateTime date = TotalMinDate; date < DateTime.Now; date += TimeSpan.FromDays(7))
            {
                DateTime startOfWeek = default(DateTime);
                
                if (date.StartOfWeek().DayOfWeek == DayOfWeek.Sunday)
                    startOfWeek = date.StartOfWeek() - TimeSpan.FromDays(1);
                
                else if (date.StartOfWeek().DayOfWeek == DayOfWeek.Monday)
                    startOfWeek = date.StartOfWeek() - TimeSpan.FromDays(2);
                
                _rangeOptions.Annotations.Xaxis.Add(new AnnotationsXAxis()
                {
                    X = startOfWeek.ToUnixTimeMilliseconds(),
                    X2 = startOfWeek.AddDays(2).ToUnixTimeMilliseconds()
                });
                
                _mainOptions.Annotations.Xaxis.Add(new AnnotationsXAxis()
                {
                    X = startOfWeek.ToUnixTimeMilliseconds(),
                    X2 = startOfWeek.AddDays(2).ToUnixTimeMilliseconds()
                });
            }

            _redCardDateChart.UpdateOptionsAsync(true, false, false);

            _timeRangeChart.UpdateOptionsAsync(true, 
                                               false, 
                                               true, 
                                               new ZoomOptions() {
                                                   Start = (DateTime.Today + DateTimeOffset.Now.Offset).ToUnixTimeMilliseconds(),
                                                   End = (DateTime.Today - TimeSpan.FromDays(7) + DateTimeOffset.Now.Offset).ToUnixTimeMilliseconds()
                                               });
            
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        _mainOptions.Chart = new Chart() { Group = groupName };
        
        _mainOptions.Chart.Animations = new Animations
        {
            Enabled = false
        };

        _mainOptions.Chart.Id = "main_chart";

        _mainOptions.Chart.Toolbar = new Toolbar
        {
            Show = false,
            AutoSelected = AutoSelected.Pan
        };

        _mainOptions.Chart.Zoom = new Zoom
        {
            Enabled = false
        };

        _mainOptions.Stroke = new Stroke()
        {
            Curve = new CurveSelections()
            {
                Curve.Straight
            }
        };
        
        
        
        _rangeOptions.Chart = new Chart() { Group = groupName };
        
        _rangeOptions.Chart.Toolbar = new Toolbar
        {
            Show = false
        };

        _rangeOptions.Chart.Animations = new Animations()
        {
            Enabled = false
        };

        _rangeOptions.Chart.Selection = new Selection()
        {
            Xaxis = new SelectionXaxis()
            {
                Max = (DateTime.Today + DateTimeOffset.Now.Offset).ToUnixTimeMilliseconds(),
                Min = (DateTime.Today - TimeSpan.FromDays(7) + DateTimeOffset.Now.Offset).ToUnixTimeMilliseconds()
            },
            Enabled = true, 
            Type = AxisType.X
        };

        _rangeOptions.Chart.Brush = new Brush()
        {
            Enabled = true,
            Target = "main_chart"
        };
        
        base.OnInitialized();
    }

    private Dictionary<string, IEnumerable<DateDataItem>> LoadRedCardDateData()
    {
        _colorsOfKeys = [];
        
        List<RedCard> redCards = ProductionService.GetRedCards()
                                                  .Where(
                                                      x => 
                                                          x.CreationDate.HasValue && 
                                                          x.VanType == StatsService.SelectedVanType &&
                                                          StatsService.CardFilterOptions.RedFlagIssues.Contains(x.RedFlagIssue)
                                              ).ToList();

        Dictionary<string, IEnumerable<DateDataItem>> redCardDateData = [];
        
        if (StatsService.SelectedDepartments.Count is 0 or > 1)
        {
            List<ProductionDepartment> departments;
            
            if (StatsService.BoardFilterOptions.vanTypes.All(x => x.IsGen2()))
                departments = ProductionService.Gen2ProductionDepartments;

            else
                departments = ProductionService.ExpoProductionDepartments;

            int i = 0;
            foreach (ProductionDepartment department in departments)
            {
                i++;
                
                if(StatsService.SelectedDepartments.Count != 0 && !StatsService.SelectedDepartments.Contains(department.Name))
                    continue;
                
                _colorsOfKeys.Add(department.Name, ColorExtensions.ColorStrings.ElementAt(i % ColorExtensions.ColorStrings.Count));
                
                List<DateDataItem> data = redCards.FilterCards(department.AreaOfOrigins).RedCardCountByLocalDateData(TimeSpan.FromHours(24) ,TotalMinDate, DateTime.Today + TimeSpan.FromDays(1)).ToList();
            
                if(data.Any(x => x.Value > 0))
                    redCardDateData.Add(department.Name, data);
            }
        }
        else
        {
            foreach (CardAreaOfOrigin area in StatsService.CardFilterOptions.CardAreaOfOrigins)
            {
                List<DateDataItem> data = redCards.Where(x => x.AreaOfOrigin == area).RedCardCountByLocalDateData(TimeSpan.FromHours(24), TotalMinDate, DateTime.Today + TimeSpan.FromDays(1)).ToList();
                
                redCardDateData.Add(area.CleanName(), data);

                _colorsOfKeys.Add(area.CleanName(), area.ToChartColor());
            }
        }
        
        return redCardDateData;
    }

    IEnumerable<DateDataItem> GetTotalData(Dictionary<string, IEnumerable<DateDataItem>> data)
    {
        Dictionary<DateTime, decimal?> totalForDay = [];

        foreach (DateDataItem dataPoint in data.Values.SelectMany(x => x))
        {
            if (!totalForDay.ContainsKey(dataPoint.Key))
                totalForDay.Add(dataPoint.Key, dataPoint.Value);
            
            else if (totalForDay[dataPoint.Key] is null)
                totalForDay[dataPoint.Key] = dataPoint.Value;
            
            else
                totalForDay[dataPoint.Key] += dataPoint.Value;
        }

        return totalForDay.OrderBy(x => x.Key).Select(x => new DateDataItem(x.Key, x.Value));
    }
    
    CancellationTokenSource _cancellationTokenSource = new CancellationTokenSource();

    async Task TriggerBrushEvent(SelectionData<DateDataItem> data, CancellationToken token)
    {
        Log.Logger.Information("Brush Updated.");

        await Task.Delay(500);
        
        if (token.IsCancellationRequested)
        {
            Log.Logger.Information("Brush canceled.");
            return;
        }

        if (!data.XAxis.Min.HasValue || !data.XAxis.Max.HasValue)
        {
            Log.Logger.Warning("Chart brush has no date range value.");
            return;
        }

        var result = (DateTimeOffset.FromUnixTimeMilliseconds((long)data.XAxis.Min).LocalDateTime, DateTimeOffset.FromUnixTimeMilliseconds((long)data.XAxis.Max).LocalDateTime);
        
        Log.Logger.Information("Brush completed {min} - {max}.", result.Item1, result.Item2);
        
        BrushDateUpdated?.Invoke(data.Chart, result);
    }

    async Task OnBrushScrolled(SelectionData<DateDataItem> data)
    {
        await _cancellationTokenSource.CancelAsync();

        _cancellationTokenSource = new CancellationTokenSource();

        await TriggerBrushEvent(data, _cancellationTokenSource.Token);
    }
}
