@using System.Diagnostics
@using Orientation = Radzen.Orientation

@inherits UpdatableComponent

@implements IDisposable

<RadzenCard>
    <RadzenStack Orientation="Orientation.Horizontal">
        <RedCardCountComponent MinDate="_minDate" MaxDate="_maxDate" @ref="_countComponent"/>
        <RadzenStack Style="flex: auto">
            <div style="padding-right: 50px">
                <RedCardsPerDayComponent TotalMinDate="@(DateTime.Now - TimeSpan.FromDays(31))" @ref=@_redCardsPerDay/>
                <RedCardAgeGraphComponent MinDate="_minDate" MaxDate="_maxDate" @ref=@_redCardAgeGraphComponent/>
            </div>
        </RadzenStack>
    </RadzenStack>
</RadzenCard>

@code {
    [Inject] 
    public NavigationManager NavigationManager { get; set; } = default!;
    
    RedCardAgeGraphComponent _redCardAgeGraphComponent = default!;
    RedCardCountComponent _countComponent = default!;
    RedCardsPerDayComponent _redCardsPerDay = default!;

    private DateTime _minDate = DateTime.Now - TimeSpan.FromDays(7);
    private DateTime _maxDate = DateTime.Now;

    protected override void OnInitialized()
    {
        ArgumentNullException.ThrowIfNull(NavigationManager);
        
        NavigationManager.LocationChanged += (_, _) => Update();
        
        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if(firstRender)
        {
            _countComponent.IssueSelected += (_, _) => Update();
            _redCardsPerDay.BrushDateUpdated += (_, tuple) =>
                                                {
                                                    _minDate = tuple.Item1;
                                                    _maxDate = tuple.Item2;
                                                    UpdateAllButCardsPerDay();
                                                };
        }
        
        base.OnAfterRender(firstRender);
    }

    public void Dispose()
    {
        _redCardsPerDay.Dispose();
        _redCardAgeGraphComponent.Dispose();
        _countComponent.Dispose();
    }

    public override void Update()
    {
        base.Update();
        _redCardAgeGraphComponent.Update();
        _countComponent.Update();
        _redCardsPerDay.Update();
    }

    void UpdateAllButCardsPerDay()
    {
        base.Update();
        _redCardAgeGraphComponent.Update();
        _countComponent.Update();
    }
}
