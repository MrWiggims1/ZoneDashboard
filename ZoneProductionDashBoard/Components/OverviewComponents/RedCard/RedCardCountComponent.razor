@using AngleSharp.Common
@using Orientation = Radzen.Orientation
@using Serilog
@using ApexCharts
@inherits UpdatableComponent

@implements IDisposable

<div class="flex flex-col items-center justify-between">
    <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center">
        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center">
            <RadzenText>Outstanding Red Cards:</RadzenText>
            <RadzenText Style="color:red" TextStyle="TextStyle.H2">@_outstandingRedCardCount</RadzenText>
        </RadzenStack>
        <RadzenStack AlignItems="AlignItems.Center">
            <RadzenText>Completed Red Cards:</RadzenText>
            <RadzenText Style="color:limegreen" TextStyle="TextStyle.H2">@_completedRedCardCount</RadzenText>
        </RadzenStack>
        <ApexChart
            TItem="DataItem"
            Height="500"
            Width="230"
            @ref="@_typeChart"
            Options="@_options"
            OnDataPointSelection="DataClicked">
            <ApexPointSeries
                TItem="DataItem"
                Items="@_redCardTypeData"
                XValue="item => ((RedFlagIssue)item.Key).CleanName()"
                YValue="item => item.Value" 
                SeriesType="SeriesType.Donut"
                OrderByDescending="item => item.Y ?? 0"
                PointColor="item => _colorLookUp[(RedFlagIssue)item.Key]"/>
        </ApexChart>
    </RadzenStack>
</div>

@code {
    [Inject]
    public IProductionService ProductionService { get; set; } = default!;

    [Inject]
    public StatsService StatsService { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public DateTime MinDate { get; set; }
    
    [Parameter, EditorRequired]
    public DateTime MaxDate { get; set; }

    public EventHandler<RedFlagIssue?>? IssueSelected;
    RedFlagIssue? _lastSelectedIssue;
    Dictionary<string, RedFlagIssue> _stringToIssue = [];
    Dictionary<RedFlagIssue, string> _colorLookUp = [];

    ApexChart<DataItem> _typeChart = default!;
    ApexChartOptions<DataItem> _options = new ApexChartOptions<DataItem>();

    int _outstandingRedCardCount = 0;
    int _completedRedCardCount = 0;
    IEnumerable<DataItem> _redCardTypeData = [];
    
    public override void Update()
    {
        base.Update();
        GetCountData();
        InvokeAsync(async () =>
                    {
                        StateHasChanged();
                        await _typeChart.UpdateOptionsAsync(true, true, false);
                        await _typeChart.UpdateSeriesAsync();
                    });
    }

    public void Dispose()
    {
        StatsService.CardFilterOptions.RedFlagIssues = Enum.GetValues<RedFlagIssue>();
    }

    protected override void OnInitialized()
    {
        _options.Legend = new Legend()
        {
            Position = ApexCharts.LegendPosition.Bottom
        };

        foreach (RedFlagIssue issue in Enum.GetValues<RedFlagIssue>())
        {
            _stringToIssue.Add(issue.CleanName(), issue);
            _colorLookUp.Add(issue, issue.ToChartColor());
        }
        
        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            GetCountData();
            StateHasChanged();
        }
        base.OnAfterRender(firstRender);
    }

    void GetCountData()
    {
        List<RedCard> redCards = ProductionService.GetRedCards().ToList();

        redCards = redCards.FilterCards(StatsService.CardFilterOptions)
                           .Where(x => StatsService.SelectedVanType == x.VanType
                                       && x.CreationDate.HasValue &&
                                       x.CreationDate.Value.LocalDateTime.Date >= MinDate.Date &&
                                       x.CreationDate.Value.LocalDateTime.Date <= MaxDate.Date)
                           .ToList();

        _outstandingRedCardCount = redCards.Count(x => 
                                                      x.CardStatus != CardStatus.Completed && 
                                                      StatsService.CardFilterOptions.RedFlagIssues.Contains(x.RedFlagIssue));
        
        _completedRedCardCount = redCards.Count(x => x.CardStatus == CardStatus.Completed && StatsService.CardFilterOptions.RedFlagIssues.Contains(x.RedFlagIssue));

        _redCardTypeData = redCards.RedCardByTypeData();
    }

    private void DataClicked(SelectedData<DataItem> item)
    {
        var newIssue = _stringToIssue[(string)item.DataPoint.X];
        
        if(_lastSelectedIssue.HasValue && _lastSelectedIssue == newIssue)
        {
            _lastSelectedIssue = null;
            StatsService.CardFilterOptions.RedFlagIssues = _lastSelectedIssue is null ? Enum.GetValues<RedFlagIssue>() : [_lastSelectedIssue.Value!];
            
            foreach (RedFlagIssue issue in Enum.GetValues<RedFlagIssue>())
            {
                _colorLookUp[issue] = issue.ToChartColor();
            }
            
            IssueSelected?.Invoke(this, null);
        }

        else
        {
            _lastSelectedIssue = newIssue;
            StatsService.CardFilterOptions.RedFlagIssues = [newIssue];
            
            foreach (RedFlagIssue issue in Enum.GetValues<RedFlagIssue>())
            {
                 _colorLookUp[issue] =  newIssue == issue ? issue.ToChartColor() : "#808080";
            }
            
            IssueSelected?.Invoke(this, newIssue);
        }
        
        Log.Logger.Debug("{issueType} selected for red card component.", _lastSelectedIssue);
    }
}
