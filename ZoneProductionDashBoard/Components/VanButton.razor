@using Microsoft.AspNetCore.Components.Rendering
@using ZoneProductionLibrary.ProductionServices.Main
@using Serilog

@implements IDisposable

@{
    string color = Color;

    if (_van is not null && OverrideColorToStatus && FiltedAreaOfOrigins.Any())
    {
        if (_redCards.Any() || _yellowCards.Any() || _jobCards.Any(x => x.DueStatus is DueStatus.OverDue))
            color = System.Drawing.Color.OrangeRed.ToHex();
        
        else if (_jobCards.Any())
            color = System.Drawing.Color.Orange.ToHex();
        
        else if (_van.JobCards.Where(x => FiltedAreaOfOrigins.Contains(x.AreaOfOrigin)).All(x => x.DueStatus is DueStatus.NotDue))
            color = System.Drawing.Color.Gray.ToHex();
        
        else
            color = System.Drawing.Color.LimeGreen.ToHex();
    }
}

<RadzenCard Style="@($"padding: 1px; background-color: {color}; width: max-content; height: max-content")">
    <RadzenSplitButton
        ButtonContent="@ButtonText" 
        Variant="Variant.Text"
        @ref="_button"
        AlwaysOpenPopup="true"
        Click="OnClick"
        BusyText="Loading..."
        Shade="Shade.Darker">
        <ChildContent>
            @if (_van is null)
            {
                <RadzenSplitButtonItem Text="Load Van" Icon="download"/>
            }
            else
            {
                <p>
                    <a style="font-weight: bold">Position:&nbsp;</a><a>@_van.Position.PositionName</a>
                    <br/>
                    <a style="font-weight: bold">Handover:&nbsp;</a><a>@VanTitleComponent.GetHandoverString(ProductionService, _van)</a>
                    
                    @if (!DetailedButton)
                    {
                        @if (_jobCards.Any())
                        {
                            <br/>
                            <a style="font-weight: bold">Job Cards Due:&nbsp;</a>
                            <br/>
                            <a>@_jobCards.Count() - @_jobCards.TotalTimeRemaining().TotalHours.ToString("N0"):@_jobCards.TotalTimeRemaining().Minutes.ToString("00") Hours</a>
                        }
                        @if (_redCards.Any())
                        {
                            <br/>
                            <a style="font-weight: bold">Red Cards Uncompleted:&nbsp;</a>
                            <br/>
                            <a>@_redCards.Count()></a>
                        }
                        @if (_yellowCards.Any())
                        {
                            <br/>
                            <a style="font-weight: bold">Yellow Cards Uncompleted:&nbsp;</a>
                            <br/>
                            <a>@_yellowCards.Count()</a>
                        }
                    }
                    else
                    {
                        @if (_jobCards.Any())
                        {
                            <br/>
                            <a style="font-weight: bold">Job Cards:</a>
                            <div style="max-height: 10em; height: min-content; overflow-y: auto; padding: 0; direction: rtl">
                                <div style="direction: ltr">
                                    <a style="font-weight: bold">Job Cards Time Remaining:&nbsp;</a>
                                    <a>@_jobCards.TotalTimeRemaining().TotalHours.ToString("N0"):@_jobCards.TotalTimeRemaining().Minutes.ToString("00") Hours</a>
                                    @foreach (JobCard jobCard in _jobCards)
                                    {
                                        <br/>
                                        if(FiltedAreaOfOrigins.Count != 1)
                                        {
                                            <a style="@($"color: {jobCard.Color(jobCard.DueStatus).ToHex()}")">@jobCard.Name - @jobCard.AreaOfOrigin.CleanName()</a>
                                        }
                                        else
                                        {
                                            <a style="@($"color: {jobCard.Color(jobCard.DueStatus).ToHex()}")">@jobCard.Name</a>
                                        }

                                        if (jobCard.CardStatus is CardStatus.UnableToComplete)
                                        {
                                            <a style="@($"color: {jobCard.Color(jobCard.DueStatus).ToHex()}")">@CardStatus.UnableToComplete.CleanName()</a>
                                        }
                                    }
                                </div>
                            </div>
                        }
                        
                        @if (_redCards.Any())
                        {
                            <br/>
                            <a style="font-weight: bold">Red Cards:</a>
                            <div style="max-height: 10em; height: min-content; overflow-y: auto; padding: 0; direction: rtl">
                                <div style="direction: ltr">
                                    @{ bool first = true;}
                                    @foreach (RedCard redCard in _redCards)
                                    {
                                        @if (first)
                                        {
                                            first = false;
                                        }
                                        else
                                        {
                                            <br/>
                                        }
                                        if (FiltedAreaOfOrigins.Count != 1)
                                        {
                                            <a style="@($"color: {redCard.Color.ToHex()}")">@redCard.Name - @redCard.AreaOfOrigin.CleanName()</a>
                                        }
                                        else
                                        {
                                            <a style="@($"color: {redCard.Color.ToHex()}")">@redCard.Name</a>
                                        }

                                        if (redCard.CardStatus is CardStatus.UnableToComplete)
                                        {
                                            <a style="@($"color: {redCard.Color.ToHex()}")">@CardStatus.UnableToComplete.CleanName()</a>
                                        }
                                    }
                                </div>
                            </div>
                        }
                        
                        @if (_yellowCards.Any())
                        {
                            <br/>
                            <a style="font-weight: bold">Yelow Cards:</a>
                            <div style="max-height: 10em; height: min-content; overflow-y: auto; padding: 0; direction: rtl">
                                <div style="direction: ltr">
                                    @{ bool first = true;}
                                    @foreach (YellowCard yellowCard in _yellowCards)
                                    {
                                        @if (first)
                                        {
                                            first = false;
                                        }
                                        else
                                        {
                                            <br/>
                                        }

                                        if (FiltedAreaOfOrigins.Count != 1)
                                        {
                                            <a style="@($"color: {yellowCard.Color.ToHex()}")">@yellowCard.Name - @yellowCard.AreaOfOrigin.CleanName()</a>
                                        }
                                        else
                                        {
                                            <a style="@($"color: {yellowCard.Color.ToHex()}")">@yellowCard.Name</a>
                                        }
                                    }
                                </div>
                            </div>
                        }
                    }
                </p>

                <RadzenSplitButtonItem Text="More Info" Icon="info"/>
            }
            <RadzenSplitButtonItem Text="Open In Trello" Icon="open_in_browser"/>
        </ChildContent>
    </RadzenSplitButton>
</RadzenCard>
@code {
    [Inject] 
    public IProductionService ProductionService { get; set; } = default!;
    
    [Inject] 
    public StatsService StatsService { get; set; } = default!;
    
    [Inject] 
    public IJSRuntime JsRuntime { get; set; } = default!;
    
    [Inject] 
    public DialogService DialogService { get; set; } = default!;
    
    [Inject] 
    public NavigationManager NavigationManager { get; set; } = default!;

    [Parameter, EditorRequired]
    public string VanName
    {
        get => _vanName;
        
        set
        {
            if(_vanName != value)
            {
                _vanName = value;
                _info = ProductionService.ProductionVans[_vanName.ToLower()];
                _van = ProductionService.GetBoardByName(_vanName);
                
                if(_van is null)
                    return;
                
                _jobCards = _van.JobCards.Where(x => x.DueStatus is DueStatus.Due or DueStatus.OverDue && x.CardStatus is not CardStatus.Completed && (!FiltedAreaOfOrigins.Any() || FiltedAreaOfOrigins.Contains(x.AreaOfOrigin))).ToList();
                _redCards = _van.RedCards.Where(x => x.CardStatus is not CardStatus.Completed && (!FiltedAreaOfOrigins.Any() || FiltedAreaOfOrigins.Contains(x.AreaOfOrigin))).ToList();
                _yellowCards = _van.YellowCards.Where(x => x.CardStatus is not CardStatus.Completed && (!FiltedAreaOfOrigins.Any() || FiltedAreaOfOrigins.Contains(x.AreaOfOrigin))).ToList();
            }
        }
    } 

    string _vanName = default!;
    
    [Parameter] 
    public string Color { get; set; } = default(string)!;
    
    [Parameter] 
    public bool OverrideColorToStatus { get; set; } = false;

    [Parameter] 
    public bool DetailedButton { get; set; } = false;
    
    [Parameter] 
    public bool ShowIcon { get; set; } = false;

    [Parameter] 
    public bool UseStatsServiceFilter { get; set; } = false;

    [Parameter] 
    public List<CardAreaOfOrigin> FiltedAreaOfOrigins { get; set; } = [];

    List<JobCard> _jobCards = [];
    List<RedCard> _redCards = [];
    List<YellowCard> _yellowCards = [];
    
    private VanBoard? _van = null;
    private VanProductionInfo _info = default!;
    private RadzenSplitButton _button = default!;

    protected override void OnInitialized()
    {
        ArgumentNullException.ThrowIfNull(_vanName);
        ArgumentNullException.ThrowIfNull(ProductionService);
        
        if (Color == default(string))
            Color = _vanName.ToVanType().GetTypeColor().ToHex();

        if (ProductionService is ProductionService prod)
        {
            ZoneProductionLibrary.ProductionServices.Main.ProductionService.BoardUpdated += Update;
        }

        if (UseStatsServiceFilter)
        {
            NavigationManager.LocationChanged += (_, _) =>
                                                 {
                                                     UpdateAreaOfOrigins();
                                                     InvokeAsync(StateHasChanged);
                                                 };
        }
        
        UpdateAreaOfOrigins();
        
        base.OnInitialized();
    }

    void UpdateAreaOfOrigins()
    {
        if(UseStatsServiceFilter)
        {
            if (StatsService.SelectedDepartments.Count == 0)
                FiltedAreaOfOrigins = [];

            else
                FiltedAreaOfOrigins = StatsService.CardFilterOptions.CardAreaOfOrigins.ToList();
        }
        
        if(_van is null)
            return;
                
        _jobCards = _van.JobCards.Where(x => x.DueStatus is DueStatus.Due or DueStatus.OverDue && x.CardStatus is not CardStatus.Completed && (!FiltedAreaOfOrigins.Any() || FiltedAreaOfOrigins.Contains(x.AreaOfOrigin))).ToList();
        _redCards = _van.RedCards.Where(x => x.CardStatus is not CardStatus.Completed && (!FiltedAreaOfOrigins.Any() || FiltedAreaOfOrigins.Contains(x.AreaOfOrigin))).ToList();
        _yellowCards = _van.YellowCards.Where(x => x.CardStatus is not CardStatus.Completed && (!FiltedAreaOfOrigins.Any() || FiltedAreaOfOrigins.Contains(x.AreaOfOrigin))).ToList();
    }

    public void Update(object? sender, BoardUpdateInfo e)
    {
        if (_van is not null && e.BoardId == _van.Id)
        {
            _van = ProductionService.GetBoardByName(_vanName);
            UpdateAreaOfOrigins();
            InvokeAsync(StateHasChanged);
        }
    }

    async Task OnClick(RadzenSplitButtonItem item)
    {
        if (item.Text == "Load Van")
        {
            _button.IsBusy = true;
            _van = await ProductionService.GetBoardAsyncByName(VanName);
            
            if(_van is not null)
            {
                _jobCards = _van.JobCards.Where(x => x.DueStatus is DueStatus.Due or DueStatus.OverDue && x.CardStatus is not CardStatus.Completed && (!FiltedAreaOfOrigins.Any() || FiltedAreaOfOrigins.Contains(x.AreaOfOrigin))).ToList();
                _redCards = _van.RedCards.Where(x => x.CardStatus is not CardStatus.Completed && (!FiltedAreaOfOrigins.Any() || FiltedAreaOfOrigins.Contains(x.AreaOfOrigin))).ToList();
                _yellowCards = _van.YellowCards.Where(x => x.CardStatus is not CardStatus.Completed && (!FiltedAreaOfOrigins.Any() || FiltedAreaOfOrigins.Contains(x.AreaOfOrigin))).ToList();
            }
            
            _button.IsBusy = false;
        }
        else if(item.Text == "Open In Trello")
        {
            await JsRuntime.InvokeVoidAsync("open", _info.Url, "_blank");
        }
        else if (item.Text == "More Info")
        {
            if (_van is null)
            {
                Log.Logger.Warning("Could not load van {van}", VanName);
                item.Disabled = true;
                return;
            }
            
            await DialogService.OpenAsync<VanView.VanView>(
                VanName.ToUpper(),
                new Dictionary<string, object>
                {
                    { "Van", _van },
                    { "Style", "height: 75h" },
                    { "GridStyles", "height: 75vh" }
                },
                new DialogOptions
                {
                    Width = "90vw",
                    Height = "99vh",
                    ShowClose = true,
                    CloseDialogOnOverlayClick = true, 
                    CloseDialogOnEsc = true,
                    TitleContent = ds => TitleFragment(ds, _van), 
                });
        }
    }
    
    RenderFragment TitleFragment(DialogService d, VanBoard board)
    {
        return __builder =>
               {
                   <VanTitleComponent Van="@board"/>
               };
    }

    void ButtonText(RenderTreeBuilder treeBuilder)
    {
        RenderFragment? fragment = null;

        if (_button.IsBusy)
        {
            treeBuilder.OpenComponent<RadzenIcon>(0);
            treeBuilder.AddAttribute(1, "Icon",  (object) "refresh");
            treeBuilder.AddAttribute(2, "Style", (object) "animation: rotation 700ms linear infinite");
            treeBuilder.CloseComponent();
            treeBuilder.OpenElement(3, "span");
            treeBuilder.AddAttribute(4, "class", "rz-button-text");
            treeBuilder.AddContent(5, "Loading...");
            treeBuilder.CloseElement();
            return;
        }
        
        if (!DetailedButton || _van is null)
        {
            fragment = __builder =>
            {
                <RadzenStack Orientation="Orientation.Horizontal" Gap=".5em">
                    <RadzenText>@VanName.ToUpper()</RadzenText>
                    @if(ShowIcon)
                    {
                        <RadzenIcon Icon="@IconName()"/>
                    }
                </RadzenStack>
            };
        }
        else
        {
            fragment = __builder =>
            {
                <p style="text-align: start; font-size: .75em">
                    <a style="font-weight: bold; font-size: 1em">@VanName.ToUpper()</a>
                    
                    @if (_jobCards.Any())
                    {
                        <br/><br/>
                        int overDueJobCardCount = _jobCards.Count(x => x.DueStatus is DueStatus.OverDue);
                        
                        <a style="font-weight: bold">Job Cards:&nbsp;</a><a>@_jobCards.Count()</a>
                        
                        if (overDueJobCardCount == _jobCards.Count)
                        {
                            <a style="font-weight: bold">&nbsp;overdue</a>
                        }
                        else if (overDueJobCardCount > 1)
                        {
                            <br/>
                            <a style="font-weight: bold">@overDueJobCardCount overdue</a>
                        }
                        
                        if (_jobCards.All(x => x.CardStatus is CardStatus.UnableToComplete))
                        {
                            <br/>
                            <a style="font-weight: bold">All Unable to complete</a>
                        }
                    }
                    @if (_redCards.Any())
                    {
                        <br/><br/>
                        <a style="font-weight: bold">Red Cards:&nbsp;</a><a>@_redCards.Count()</a>
                        
                        if (_redCards.All(x => x.CardStatus is CardStatus.UnableToComplete))
                        {
                            <br/>
                            <a style="font-weight: bold">All Unable to complete</a>
                        }
                    }
                    @if (_yellowCards.Any())
                    {
                        <br/><br/>
                        <a style="font-weight: bold">Yellow Cards:&nbsp;</a><a>@_yellowCards.Count()</a>
                    }
                </p>
            };
        }
        
        treeBuilder.AddContent(0, fragment);
    }

    string IconName()
    {
        @if (_van is null)
        {
            return "question_mark";
        }
        else
        {
            @if (_van.JobCards.Any(x => (x.Position < _van.Position || x.Position.Equals(_van.Position)) && x.CardStatus != CardStatus.Completed) || _van.RedCards.Any(x => x.CardStatus != CardStatus.Completed) || _van.YellowCards.Any(x => x.CardStatus != CardStatus.Completed))
            {
                if (_info.Handover - TimeSpan.FromDays(3) < DateTime.Now)
                {
                    return "priority_high";
                }
                else
                {
                    return "exclamation";
                }
            }
            else
            {
                return "done_all";
            }
        }
    }

    public void Dispose()
    {
        _van = null;
        _info = default!;
    }
}