@using Serilog
@using ZoneProductionLibrary.ProductionServices.Main

@implements IDisposable

<div style="@Style">
    <RadzenTabs>
        <Tabs>
            <RadzenTabsItem Text="Job Cards">
                <JobCardGridComponent JobCards="Van.JobCards" Style="@GridStyles" GroupByAreaOfOrigin="@true" @ref="@_jobCardGrid"/>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Red Cards">
                <RedCardGridComponent RedCards="Van.RedCards" Style="@GridStyles" @ref="@_redCardGrid" IsSingleVan="true"/>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Yellow Cards">
                <YellowCardGridComponent YellowCards="Van.YellowCards" Style="@GridStyles" @ref="_yellowCardGrid" IsSingleVan="true"/>
            </RadzenTabsItem>
            <RadzenTabsItem Text="History">
                <VanRedLineDeadLineComponent Van="Van" @ref="@_redLineDeadLineComponent"/>
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
</div>

@code {
    [Parameter, EditorRequired] 
    public VanBoard Van { get; set; } = default!;

    [Inject] 
    public IProductionService ProductionService { get; set; } = default!;

    [Parameter]
    public string Style { get; set; } = "";
    
    [Parameter]
    public string GridStyles { get; set; } = "";
    
    CancellationTokenSource UpdateCancellationTokenSource = new CancellationTokenSource();
    TimeSpan UpdateRateLimit = TimeSpan.FromSeconds(5);
    DateTime LastUpdate = DateTime.Now;

    VanRedLineDeadLineComponent? _redLineDeadLineComponent;
    RedCardGridComponent? _redCardGrid;
    YellowCardGridComponent? _yellowCardGrid;
    JobCardGridComponent? _jobCardGrid;

    protected override void OnInitialized()
    {
        ArgumentNullException.ThrowIfNull(Van);
        ArgumentNullException.ThrowIfNull(ProductionService);
        
        if (ProductionService is ProductionService)
        {
            ZoneProductionLibrary.ProductionServices.Main.ProductionService.BoardUpdated += QueueUpdateIfIdSubscribed;
        }
        
        base.OnInitialized();
    }
    
    void QueueUpdateIfIdSubscribed(object? sender, BoardUpdateInfo e)
    {
        if (e.BoardId == Van.Id)
        {
            QueueUpdate();
        }
    }
    
    private void QueueUpdate()
    {
        Log.Logger.Information("s");
        UpdateCancellationTokenSource.Cancel();
        
        TimeSpan timeSinceUpdate = DateTime.Now - LastUpdate;
        LastUpdate = DateTime.Now;
        
        if (timeSinceUpdate > UpdateRateLimit)
            InvokeAsync(() => Update(UpdateCancellationTokenSource.Token));
        
        else
            InvokeAsync(() => Update(UpdateCancellationTokenSource.Token, UpdateRateLimit - timeSinceUpdate));
    }
    
    public async Task Update(CancellationToken token, TimeSpan? waitTime = null)
    {
        if (waitTime is not null)
        {
            Log.Logger.Information("d");
            await Task.Delay(waitTime.Value);
            
            if(token.IsCancellationRequested && DateTime.Now - LastUpdate < waitTime * .99)
            {
                Log.Logger.Information("c");
                return;
            }
        }
        
        Log.Logger.Information("done");

        var updatedVan = ProductionService.GetBoardById(Van.Id);

        if (updatedVan is not null)
            Van = updatedVan;
            
        _jobCardGrid?.Update();
        _redCardGrid?.Update();
        _yellowCardGrid?.Update();
        _redLineDeadLineComponent?.Update();

        StateHasChanged();
    }

    public void Dispose()
    {
        _jobCardGrid?.Dispose();
        _redCardGrid?.Dispose();
        _yellowCardGrid?.Dispose();
        _redLineDeadLineComponent?.Dispose();
        
        ZoneProductionLibrary.ProductionServices.Main.ProductionService.BoardUpdated -= QueueUpdateIfIdSubscribed;
    }
}