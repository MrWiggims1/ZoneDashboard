@using ZoneProductionLibrary.ProductionServices.Main

@inherits UpdatableComponent

@implements IDisposable

<div style="@Style">
    <RadzenTabs>
        <Tabs>
            <RadzenTabsItem Text="Job Cards">
                <JobCardGridComponent JobCards="Van.JobCards" Style="@GridStyles" GroupByAreaOfOrigin="@true" @ref="@_jobCardGrid"/>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Red Cards">
                <RedCardGridComponent RedCards="Van.RedCards" Style="@GridStyles" @ref="@_redCardGrid" IsSingleVan="true"/>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Yellow Cards">
                <YellowCardGridComponent YellowCards="Van.YellowCards" Style="@GridStyles" @ref="_yellowCardGrid" IsSingleVan="true"/>
            </RadzenTabsItem>
            <RadzenTabsItem Text="History">
                <VanRedLineDeadLineComponent Van="Van" @ref="@_redLineDeadLineComponent"/>
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
</div>

@code {
    [Parameter, EditorRequired] 
    public VanBoard Van { get; set; } = default!;

    [Inject] 
    public IProductionService ProductionService { get; set; } = default!;

    [Parameter]
    public string Style { get; set; } = "";
    
    [Parameter]
    public string GridStyles { get; set; } = "";
    

    VanRedLineDeadLineComponent? _redLineDeadLineComponent;
    RedCardGridComponent? _redCardGrid;
    YellowCardGridComponent? _yellowCardGrid;
    JobCardGridComponent? _jobCardGrid;

    protected override void OnInitialized()
    {
        ArgumentNullException.ThrowIfNull(Van);
        ArgumentNullException.ThrowIfNull(ProductionService);
        
        if (ProductionService is ProductionService)
        {
            ZoneProductionLibrary.ProductionServices.Main.ProductionService.BoardUpdated += UpdateIfIdSubscribed;
        }
        
        base.OnInitialized();
    }
    
    void UpdateIfIdSubscribed(object? sender, BoardUpdateInfo e)
    {
        if (e.BoardId == Van.Id)
        {
            var updatedVan = ProductionService.GetBoardById(Van.Id);

            if (updatedVan is not null)
                Van = updatedVan;
            
            _jobCardGrid?.Update();
            _redCardGrid?.Update();
            _yellowCardGrid?.Update();
            _redLineDeadLineComponent?.Update();

            InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        _jobCardGrid?.Dispose();
        _redCardGrid?.Dispose();
        _yellowCardGrid?.Dispose();
        _redLineDeadLineComponent?.Dispose();
    }
}