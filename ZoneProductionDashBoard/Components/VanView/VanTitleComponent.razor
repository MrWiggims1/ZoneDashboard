<RadzenText Style="font-weight: bold;">@Van.Name.ToUpper() - @Van.Position.PositionName - Handover: @GetHandoverString(ProductionService, Van)</RadzenText>

@code {
    [Inject] 
    public IProductionService ProductionService { get; set; } = default!;
    
    [Parameter, EditorRequired] 
    public VanBoard Van { get; set; } = default!;

    protected override void OnInitialized()
    {
        ArgumentNullException.ThrowIfNull(ProductionService);
        ArgumentNullException.ThrowIfNull(Van);
        
        base.OnInitialized();
    }

    public static string GetHandoverString(IProductionService productionService, VanBoard van)
    {
        var info = productionService.GetVanInfo(van);
        
        if (info.HandoverState is HandoverState.HandedOver)
            return "Handed Over.";
        
        if(van.Handover.HasValue)
        {
            if (van.Handover.Value - DateTimeOffset.Now < TimeSpan.Zero)
            {
                if(van.Handover.Value - DateTimeOffset.Now < - TimeSpan.FromDays(1))
                    return $"{((van.Handover.Value - DateTimeOffset.Now) * -1).TotalDays.ToString("N0")} days ago";
                
                else
                    return "over due";
            }
            
            if(van.Handover.Value - DateTimeOffset.Now > TimeSpan.FromDays(3))
                return $"{van.Handover.Value.LocalDateTime.ToString("dd/MM/yy")}";

            else
                return $"{van.Handover.Value.LocalDateTime.ToString("ddd hh:mm tt")}";
        }

        return "";
    }
}